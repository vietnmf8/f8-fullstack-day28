/**
 * XHR: G·ª≠i y√™u c·∫ßu qua internet ƒë·ªÉ l·∫•y d·ªØ li·ªáu v·ªÅ:
 * JSONPlaceholder: Web Fake REST API
 * XHR: XML HttpRequest: Gi√∫p ch√∫ng ta t∆∞∆°ng t√°c v·ªõi m√°y ch·ªß, g·ªçi y√™u c·∫ßu -> m√°y ch·ªß tr·∫£ v·ªÅ d·ªØ li·ªáu -> ch√∫ng ta nh·∫≠n v·ªÅ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON
 *
 * ·ª®ng d·ª•ng: M·ªôt trang web ƒë√£ t·∫£i xong -> Thay v√¨ ph·∫£i f5 ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi -> XHR cho ph√©p hi·ªÉn th·ªã th√™m d·ªØ li·ªáu m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang. VD: trong ph·∫ßn b√¨nh lu·∫≠n, c√≥ n√∫t XEM TH√äM -> nh·∫•n v√†o ƒë·ªÉ xem th√™m b√¨nh lu·∫≠n thay v√¨ t·∫£i l·∫°i trang
 *
 * T√ìM L·∫†I:
 * - Gi√∫p c·∫≠p nh·∫≠t trang web m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang
 * - G·ª≠i nh·∫≠n d·ªØ li·ªáu khi trang web ƒë√£ t·∫£i xong
 * - C√≥ th·ªÉ ti·∫øp t·ª•c g·ª≠i nh·∫≠n d·ªØ li·ªáu √¢m th·∫ßm
 *
 *
 * HTTP response state Code: th·ªÉ hi·ªán trang th√°i response l√† th√†nh c√¥ng hay th·∫•t b·∫°i
 * 200 - 299: ƒê·∫ßu m√£ th√†nh c√¥ng!
 *  + 201: Th√†nh c√¥ng khi t·∫°o m·ªõi
 *  + 204: Th√†nh c√¥ng nh∆∞ng kh√¥ng tr·∫£ v·ªÅ g√¨
 * 300 - 399: ƒê·∫ßu m√£ chuy·ªÉn h∆∞·ªõng
 * 400 - 499: L·ªói t·ª´ ph√≠a m√°y kh√°ch
 * 500 - 599: L·ªói t·ª´ ph√≠a m√°y ch·ªß
 *
 * =>> V·∫≠y ki·ªÉm tra th√†nh c√¥ng b·∫±ng c√°ch ki·ªÉm tra status >= 200 v√† < 400
 *
 */
/* V√≠ d·ª• m·ªëi quan h·ªá M√°y kh√°ch - M√°y ch·ªß:
H√£y t∆∞·ªüng t∆∞·ª£ng b·∫°n ƒëi ƒÉn ph·ªü:
- B·∫°n = M√°y kh√°ch (Client)
- Qu√°n ph·ªü + nh√¢n vi√™n n·∫•u = M√°y ch·ªß (Server)

Di·ªÖn bi·∫øn:

1. B·∫°n g·ªçi m√≥n ‚Üí G·ª≠i y√™u c·∫ßu:
"Cho t√¥i m·ªôt t√¥ ph·ªü t√°i g·∫ßu!"
‚Üí ƒê√¢y ch√≠nh l√† request t·ª´ client g·ª≠i ƒë·∫øn server.

2. Qu√°n n·∫•u ph·ªü ‚Üí X·ª≠ l√Ω y√™u c·∫ßu:
Nh√¢n vi√™n b·∫øp l·∫•y th·ªãt, n·∫•u n∆∞·ªõc l√®o, l√†m ph·ªü.
‚Üí ƒê√¢y l√† server-side processing.

3. Nh√¢n vi√™n mang ph·ªü ra cho b·∫°n ‚Üí G·ª≠i ph·∫£n h·ªìi:
B·∫°n nh·∫≠n ƒë∆∞·ª£c t√¥ ph·ªü, ƒÉn th√¥i!
‚Üí ƒê√¢y l√† response t·ª´ server tr·∫£ v·ªÅ client.

C√°c lo·∫°i l·ªói (HTTP code):
- 200: Qu√°n l√†m xong ph·ªü, b∆∞ng ra cho b·∫°n ngon l√†nh ‚úÖ
- 300: Nh√¢n vi√™n b·∫£o: "B√†n n√†y h·∫øt ph·ªü, m·ªùi b·∫°n qua b√†n s·ªë 5!" ‚û° (chuy·ªÉn h∆∞·ªõng)
- 400: B·∫°n g·ªçi m√≥n kh√¥ng c√≥ trong menu ‚Üí Qu√°n b√°o l·ªói: "Kh√¥ng c√≥ ph·ªü b√≤ Kobe ·ªü ƒë√¢y!" üö´ (l·ªói client)
- 500: Qu√°n b·ªã m·∫•t ƒëi·ªán, b·∫øp ch√°y ‚Üí Qu√°n kh√¥ng n·∫•u ƒë∆∞·ª£c ph·ªü üòµ (l·ªói server)

C√°ch nh·ªõ nhanh:
- Client = Ng∆∞·ªùi ƒëi g·ªçi m√≥n
- Server = Qu√°n ph·ª•c v·ª• m√≥n
- Request = L·ªùi g·ªçi m√≥n
- Response = M√≥n ƒÉn ƒë∆∞·ª£c mang ra


*/

/* readyState:
    - Gi√° tr·ªã 0: UNSET - M√°y kh√°ch ƒë∆∞·ª£c t·∫°o, open() ch∆∞a ƒë∆∞·ª£c g·ªçi
    - Gi√° tr·ªã 1: OPENED - open() ƒë∆∞·ª£c g·ªçi
    - Gi√° tr·ªã 2: HEADERS_RECEIVED - send() ƒë∆∞·ª£c g·ªçi l√† ti√™u ƒë·ªÅ v√† tr·∫°ng th√°i ƒë√£ c√≥ s·∫µn
    - Gi√° tr·ªã 3: LOADING - ƒêang t·∫£i xu·ªëng, responseText l∆∞u tr·ªØ m·ªôt ph·∫ßn d·ªØ li·ªáu
    - Gi√° tr·ªã 4: DONE - Ho·∫°t ƒë·ªông ƒë√£ ho√†n t·∫•t (nh∆∞ng ch∆∞a bi·∫øt th√†nh c√¥ng hay th·∫•t b·∫°i) =>> Ch·ªâ l√†m vi·ªác v·ªõi c√°i n√†y
 */

/* H√†m g·ª≠i request */
const xhr = new XMLHttpRequest();
xhr.open("GET", "https://jsonplaceholder.typicode.com/posts", true); // true: b·∫•t ƒë·ªìng b·ªô | false: ƒë·ªìng b·ªô

// // Khi m√£ code readyState thay ƒë·ªïi => g·ªçi v√†o callback
// // onreadystatechange s·∫Ω ƒëi qua tr·∫°ng th√°i 2 - 3 - 4 n√™n s·∫Ω ch·∫°y 3 l·∫ßn
// xhr.onreadystatechange = function () {
//     if (this.readyState === 4 && this.status >= 200 && this.status < 400) {
//         // tr·∫£ r·∫£ d·ªØ li·ªáu responseText d∆∞·ªõi d·∫°ng JSON
//         const posts = JSON.parse(this.responseText);
//         renderPosts(posts);
//     }
// };


// onload: lu√¥n tr·∫£ v·ªÅ tr·∫°ng th√°i 4 n√™n ch·ªâ ch·∫°y 1 l·∫ßn
xhr.onload = function () {
    if (this.status >= 200 && this.status < 400) {
        // tr·∫£ r·∫£ d·ªØ li·ªáu responseText d∆∞·ªõi d·∫°ng JSON
        const posts = JSON.parse(this.responseText);
        renderPosts(posts);
    }
};

// G·ª≠i request
xhr.send();

/* H√†m render danh s√°ch c√°c b√†i posts */
function renderPosts(posts) {
    const list = document.querySelector("#list");
    list.innerHTML = posts.map(
        (post) => `
        <li><a>${post.id}. ${post.title}</a></li>
        `
    ).join("");
}
