/* ==========================================================
 * 1.1. T·∫°o utility function ƒë·ªÉ g·ªçi API v·ªõi XHR
 * ==========================================================*/

/* H√†m g·ª≠i y√™u c·∫ßu
    -  Tham s·ªë c·ªßa callback: (error, data)
*/
function sendRequest(method, url, callback) {
    const xhr = new XMLHttpRequest();
    xhr.open(method, url, true); // true: th·ª±c hi·ªán b·∫•t ƒë·ªìng b·ªô
    xhr.send(); // g·ª≠i request
    // onload: ƒë∆∞·ª£c g·ªçi khi request ho√†n th√†nh & nh·∫≠n response
    xhr.onload = () => {
        if (xhr.status >= 200 && xhr.status < 400) {
            if (typeof callback === "function") {
                // Khi th√†nh c√¥ng
                try {
                    const data = JSON.parse(xhr.responseText);
                    callback(null, data);
                } catch (error) {
                    // Khi th·∫•t b·∫°i -> N·∫øu l·ªói ·ªü JSON.parse
                    callback(new Error("L·ªói ƒë·ªãnh d·∫°ng JSON!"), null);
                }
            }
        } else {
            // l·ªói t·ª´ server -> c·∫ßn in ra m√£ l·ªói 4xx,, 5xx
            callback(new Error(`L·ªói! HTTP Code: ${xhr.status}`), null);
        }
    };

    // L·ªói m·∫°ng
    xhr.onerror = () => {
        callback(new Error("L·ªói m·∫°ng!"), null);
    };
}

/* ==========================================================
 * 1.2. Implement 3 ch·ª©c nƒÉng s·ª≠ d·ª•ng JSONPlaceholder API
 * ==========================================================*/

/**
 *  Ch·ª©c nƒÉng 1: User Pro le Card
 */

/* T·∫°o URL chung */
const API_BASE_URL = "https://jsonplaceholder.typicode.com";

/* Get DOM Element */
const userIdInput = document.querySelector("#user-id-input");
const searchUserBtn = document.querySelector("#search-user-btn");
const userProfileCard = document.querySelector("#user-profile-card");
const userAvatar = document.getElementById("user-avatar");
const userName = document.querySelector("#user-name");
const userEmail = document.querySelector("#user-email");
const userPhone = document.querySelector("#user-phone");
const userWebsite = document.querySelector("#user-website");
const userCompany = document.querySelector("#user-company");
const userAddress = document.querySelector("#user-address");
const userError = document.querySelector("#user-error");
const userLoading = document.querySelector("#user-loading");

/* "Click": N√∫t T√¨m ki·∫øm User */
searchUserBtn.addEventListener("click", () => {
    // Ki·ªÉm tra input c√≥ ƒë∆∞·ª£c nh·∫≠p kh√¥ng?
    const usedId = userIdInput.value;
    if (!usedId) {
        // Hi·ªÉn th·ªã l·ªói & ·∫©n card
        userProfileCard.classList.remove("show");
        userError.classList.add("show");
        userError.textContent = "Vui l√≤ng nh·∫≠p User ID";
        return;
    }

    userLoading.classList.add("show"); // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
    userError.classList.remove("show"); //·∫®n l·ªói
    userProfileCard.classList.remove("show"); // ·∫®n Profile Card

    // T·∫°o URL API
    const userUrl = `${API_BASE_URL}/users/${usedId}`;

    // G·ª≠i request
    sendRequest("GET", userUrl, (error, user) => {
        userLoading.classList.remove("show"); //·∫®n loading khi sendRequest ho√†n th√†nh

        if (error) {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            userError.classList.add("show");
            userError.textContent = `L·ªói: ${error.message}`;
            return;
        }

        // Hi·ªán card
        userProfileCard.classList.add("show");
        userAvatar.textContent = user.name.charAt(0); // L·∫•y k√Ω t·ª± ƒë·∫ßu ti√™n
        userName.textContent = user.name;
        userEmail.textContent = user.email;
        userPhone.textContent = user.phone;
        userWebsite.textContent = user.website;
        userCompany.textContent = user.company.name;
        userAddress.textContent = `${user.address.street}, ${user.address.city}`;
    });
});

/**
 *  Ch·ª©c nƒÉng 2: Posts v·ªõi Comments
 */

/* Get DOM Element */
const postsContainer = document.querySelector("#posts-container");
const postsError = document.querySelector("#posts-error");
const postItemTemplate = document.querySelector(".post-item[data-post-id='']"); // template
const postsLoading = document.querySelector("#posts-loading");

/* H√†m render Comment */
function renderComment(comment, commentsContainer) {
    // Clone Node commentsContainer
    const commentItemTemplate = document.querySelector(".comment-item");
    const commentItem = commentItemTemplate.cloneNode(true);

    // Hi·ªÉn th·ªã comments b√™n d∆∞·ªõi post (name, email, body)
    commentItem.querySelector(".comment-author").textContent = comment.name;
    commentItem.querySelector(".comment-email").textContent = comment.email;
    commentItem.querySelector(".comment-body").textContent = comment.body;

    commentsContainer.appendChild(commentItem);
}

/* H√†m render b√†i Post */
function renderPost(post) {
    // Clone template ƒë·ªÉ t·∫°o post item m·ªõi
    const postItem = postItemTemplate.cloneNode(true);

    // Fill d·ªØ li·ªáu cho t·ª´ng b√†i post
    postItem.dataset.postId = post.id;
    postItem.querySelector(".post-title").textContent = post.title;
    postItem.querySelector(".post-body").textContent = post.body;

    // Get Dom Element
    const authorName = postItem.querySelector(".author-name");
    const commentsContainer = postItem.querySelector(".comments-container");
    const showCommentsBtn = postItem.querySelector(".show-comments-btn");
    showCommentsBtn.dataset.postId = post.id;

    // L·∫•y th√¥ng tin t√°c gi·∫£
    const userUrl = `${API_BASE_URL}/users/${post.userId}`;
    sendRequest("GET", userUrl, (error, user) => {
        if (error) {
            authorName.textContent = "T√™n t√°c gi·∫£ kh√¥ng t·ªìn t·∫°i!";
            return;
        }
        authorName.textContent = user.name;
    });

    // Click: N√∫t "Xem Comment"
    showCommentsBtn.addEventListener("click", () => {
        // N·∫øu comments ƒëang hi·ªÉn th·ªã th√¨ ·∫©n ƒëi
        // if (commentsContainer.classList.contains("show")) {
        //     commentsContainer.classList.remove("show");
        //     return;
        // }
        // commentsContainer.innerHTML = `<p>üîÑ ƒêang t·∫£i comments...</p>`;
        // commentsContainer.classList.add("show");

        showCommentsBtn.disabled = true;
        commentsContainer.innerHTML = `<p>ƒêang t·∫£i comments...</p>`;
        const commentsUrl = `${API_BASE_URL}/posts/${post.id}/comments`;
        sendRequest("GET", commentsUrl, (error, comments) => {
            if (error) {
                commentsContainer.innerHTML = `<p class="error-message show">L·ªói khi t·∫£i comments.</p>`;
                return;
            }

            // X√≥a l·ªói v√† render c√°c comment
            commentsContainer.innerHTML = "";
            comments.forEach((comment) => {
                renderComment(comment, commentsContainer);
            });

            // Hi·ªÉn th·ªã container
            const isShown = commentsContainer.classList.toggle("show");
            showCommentsBtn.textContent = isShown
                ? "·∫®n comments"
                : "Xem comments";
        });
    });

    // Th√™m post v√†o container
    postsContainer.appendChild(postItem);
}

/* T·ª± ƒë·ªông load 5 posts ƒë·∫ßu ti√™n khi v√†o trang */
document.addEventListener("DOMContentLoaded", () => {
    // Loading
    postsLoading.classList.add("show");
    postsError.classList.remove("show");
    postsContainer.style.display = "none";

    const postsUrl = `${API_BASE_URL}/posts?_limit=5`;
    sendRequest("GET", postsUrl, (error, posts) => {
        if (error) {
            postsError.classList.add("show");
            postsError.textContent = `L·ªói: ${error.message}`;
            return;
        }
        postsContainer.style.display = "grid";
        postsLoading.classList.remove("show");
        postsError.classList.remove("show");
        // Render t·ª´ng post
        posts.forEach(renderPost);
    });
});

/**
 *  Ch·ª©c nƒÉng 3: Todo List v·ªõi Filter
 */

/* Get DOM Element */
const loadTodosBtn = document.querySelector("#load-todos-btn");
const todoUserIdInput = document.querySelector("#todo-user-id-input");
const todoList = document.querySelector("#todo-list");
const todoFilters = document.querySelector("#todo-filters");
const todoError = document.querySelector("#todos-error");
const todoItemTemplate = document.querySelector(".todo-item[data-todo-id='']");
const todosLoading = document.querySelector("#todos-loading");

// C√°c element hi·ªÉn th·ªã th·ªëng k√™
const totalTodos = document.querySelector("#total-todos");
const completedTodos = document.querySelector("#completed-todos");
const incompleteTodos = document.querySelector("#incomplete-todos");

/* Kh·ªüi t·∫°o bi·∫øn */
let allTodos = []; // M·∫£ng ch·ª©a c√°c todo
let currentFilter = "all"; // Tr·∫°ng th√°i filter

/* H√†m filter tr·∫°ng th√°i: T·∫•t c·∫£ | ƒê√£ ho√†n th√†nh | Ch∆∞a ho√†n th√†nh */
function filterTodos() {
    let filterTodos = [];
    if (currentFilter === "completed") {
        filterTodos = allTodos.filter((todo) => todo.completed);
    } else if (currentFilter === "incomplete") {
        filterTodos = allTodos.filter((todo) => !todo.completed);
    } else {
        filterTodos = allTodos;
    }

    renderTodos(filterTodos);
}

/* H√†m render danh s√°ch todos */
function renderTodos(todos) {
    todoList.innerHTML = ""; // Reset todo-list
    if (!todos) return;

    todos.forEach((todo) => {
        // Clone Node
        const todoItem = todoItemTemplate.cloneNode(true);

        todoItem.dataset.todoId = todo.id;
        todoItem.dataset.completed = todo.completed;

        todoItem.querySelector(".todo-text").textContent = todo.title;

        if (todo.completed) {
            todoItem.classList.add("completed");
        } else {
            todoItem.classList.add("incomplete");
        }

        todoList.appendChild(todoItem);
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™
    const completedCount = allTodos.filter((todo) => todo.completed).length;
    const incompleteCount = allTodos.length - completedCount;

    totalTodos.textContent = allTodos.length;
    completedTodos.textContent = completedCount;
    incompleteTodos.textContent = incompleteCount;
}

/* "Click": N√∫t loadTodosBtn */
loadTodosBtn.addEventListener("click", () => {
    const userId = todoUserIdInput.value;
    if (!userId) {
        todoError.classList.add("show");
        todoError.textContent = "Vui l√≤ng nh·∫≠p User ID.";
        return;
    }

    // Loading
    todosLoading.classList.add("show");
    todoError.classList.remove("show");
    todoList.innerHTML = "";
    allTodos = [];
    renderTodos([]);

    const todosUrl = `${API_BASE_URL}/users/${userId}/todos`;
    todoError.classList.remove("show"); // ·∫®n l·ªói c≈©

    // G·ª≠i request ƒë·ªÉ nh·∫≠n todos
    sendRequest("GET", todosUrl, (error, todos) => {
        todosLoading.classList.remove("show");
        if (error) {
            todoError.classList.add("show");
            todoError.textContent = `L·ªói: ${error.message}`;
            return;
        }
        allTodos = todos;
        // Render todos theo filter
        filterTodos();
    });
});

/* Click: C√°c n√∫t filter */
todoFilters.addEventListener("click", (e) => {
    // Ki·ªÉm tra xem c√≥ ph·∫£i button kh√¥ng
    const isButton = e.target.tagName === "BUTTON";
    if (isButton) {
        // Active button
        const activeBtn = document.querySelector(".filter-btn.active");
        const currentBtn = e.target;
        // B·ªè active ·ªü button c≈©
        activeBtn.classList.remove("active");
        // Th√™m active cho button m·ªõi
        currentBtn.classList.add("active");

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa filter hi·ªán t·∫°i
        currentFilter = currentBtn.dataset.filter;
        filterTodos();
    }
});
