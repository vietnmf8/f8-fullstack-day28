/* ==========================================================
 * 3.1. T·∫°o async function wrapper v·ªõi Fetch API
 * ========================================================== */

/* 
H√†m g·ª≠i y√™u c·∫ßu
    -  Tham s·ªë c·ªßa callback: (error, data)
*/

async function sendRequest(method, url) {
    const response = await fetch(url, { method: method });

    // N·∫øu response l·ªói!
    if (!response.ok) {
        const error = new Error(`L·ªói! HTTP Code: ${response.status}`);
        error.status = response.status;
        throw error;
    }

    // N·∫øu response.ok -> parse JSON
    return response.json();
}

/* ==========================================================
 * 3.2. Refactor l·∫°i 3 ch·ª©c nƒÉng s·ª≠ d·ª•ng async/await
 * 3.3. Error Handling v·ªõi try/catch
 * ==========================================================*/

/* T·∫°o URL chung */
const API_BASE_URL = "https://jsonplaceholder.typicode.com";

/**
 * Ch·ª©c nƒÉng 1: User Profile Card
 */

/* Get DOM Element */
const userIdInput = document.querySelector("#user-id-input");
const searchUserBtn = document.querySelector("#search-user-btn");
const userProfileCard = document.querySelector("#user-profile-card");
const userAvatar = document.getElementById("user-avatar");
const userName = document.querySelector("#user-name");
const userEmail = document.querySelector("#user-email");
const userPhone = document.querySelector("#user-phone");
const userWebsite = document.querySelector("#user-website");
const userCompany = document.querySelector("#user-company");
const userAddress = document.querySelector("#user-address");
const userError = document.querySelector("#user-error");
const userLoading = document.querySelector("#user-loading");

/* Click: N√∫t t√¨m ki·∫øm Users */
searchUserBtn.addEventListener("click", async () => {
    const userId = userIdInput.value;
    if (!userId) {
        userProfileCard.classList.remove("show");
        userError.classList.add("show");
        userError.textContent = "Vui l√≤ng nh·∫≠p User ID";
        return;
    }

    // Hi·ªÉn th·ªã loading, ·∫©n l·ªói v√† card c≈©
    userLoading.classList.add("show");
    userError.classList.remove("show");
    userProfileCard.classList.remove("show");

    try {
        const userUrl = `${API_BASE_URL}/users/${userId}`;
        const user = await sendRequest("GET", userUrl);

        // Khi th√†nh c√¥ng! (Resolve)
        userProfileCard.classList.add("show");
        userAvatar.textContent = user.name.charAt(0);
        userName.textContent = user.name;
        userEmail.textContent = user.email;
        userPhone.textContent = user.phone;
        userWebsite.textContent = user.website;
        userCompany.textContent = user.company.name;
        userAddress.textContent = `${user.address.street}, ${user.address.city}`;
    } catch (error) {
        // Khi th·∫•t b·∫°i, hi·ªÉn th·ªã l·ªói
        userError.classList.add("show");
        if (error.status === 404) {
            userError.textContent = `L·ªói: Kh√¥ng t√¨m th·∫•y user v·ªõi ID ${userId}.`;
        } else {
            userError.textContent = `L·ªói: ${error.message}`;
        }
    } finally {
        userLoading.classList.remove("show");
    }
});

/**
 * Ch·ª©c nƒÉng 2: Posts v·ªõi Comments
 */

/* L·∫•y c√°c DOM element */
const postsContainer = document.querySelector("#posts-container");
const postsError = document.querySelector("#posts-error");
const postsLoading = document.querySelector("#posts-loading");
const loadMoreBtn = document.querySelector("#load-more-posts-btn");
const postItemTemplate = document.querySelector(".post-item[data-post-id='']");

/* Bi·∫øn */
let currentPage = 1;

/* H√†m render Comment */
function renderComment(comment, commentsContainer) {
    const commentItemTemplate = document.querySelector(".comment-item");
    const commentItem = commentItemTemplate.cloneNode(true);

    commentItem.querySelector(".comment-author").textContent = comment.name;
    commentItem.querySelector(".comment-email").textContent = comment.email;
    commentItem.querySelector(".comment-body").textContent = comment.body;

    commentsContainer.appendChild(commentItem);
}

/* H√†m render b√†i post */
function renderPost(post) {
    const postItem = postItemTemplate.cloneNode(true);

    // ƒêi·ªÅn d·ªØ li·ªáu c∆° b·∫£n c·ªßa post
    postItem.dataset.postId = post.id;
    postItem.querySelector(".post-title").textContent = post.title;
    postItem.querySelector(".post-body").textContent = post.body;

    const authorName = postItem.querySelector(".author-name");
    const commentsContainer = postItem.querySelector(".comments-container");
    const showCommentsBtn = postItem.querySelector(".show-comments-btn");
    showCommentsBtn.dataset.postId = post.id;

    // L·∫•y th√¥ng tin t√°c gi·∫£
    (async () => {
        try {
            const userUrl = `${API_BASE_URL}/users/${post.userId}`;
            const user = await sendRequest("GET", userUrl);
            authorName.textContent = user.name;
        } catch (error) {
            authorName.textContent = "T√™n t√°c gi·∫£ kh√¥ng t·ªìn t·∫°i!";
        }
    })(); // g·ªçi h√†m ·∫©n danh

    // S·ª± ki·ªán click ƒë·ªÉ xem/·∫©n comments
    showCommentsBtn.addEventListener("click", async () => {
        const isShown = commentsContainer.classList.toggle("show");
        showCommentsBtn.textContent = isShown ? "·∫®n comments" : "Xem comments";

        if (isShown && commentsContainer.children.length === 0) {
            commentsContainer.innerHTML = `<p>üîÑ ƒêang t·∫£i comments...</p>`;
            try {
                const commentsUrl = `${API_BASE_URL}/posts/${post.id}/comments`;
                const comments = await sendRequest("GET", commentsUrl);
                commentsContainer.innerHTML = ""; // X√≥a loading v√† render comments
                comments.forEach((comment) => {
                    renderComment(comment, commentsContainer);
                });
            } catch (error) {
                commentsContainer.innerHTML = `<p class="error-message show">L·ªói khi t·∫£i comments.</p>`;
            }
        }
    });

    // Th√™m post v√†o container
    postsContainer.appendChild(postItem);
}

/* H√†m t·∫£i posts theo trang */
async function loadPosts(page, limit = 5) {
    postsLoading.classList.add("show");
    loadMoreBtn.style.display = "none";
    postsError.classList.remove("show");

    try {
        const postsUrl = `${API_BASE_URL}/posts?_page=${page}&_limit=${limit}`;
        const posts = await sendRequest("GET", postsUrl);

        if (posts && posts.length > 0) {
            posts.forEach(renderPost);
            loadMoreBtn.style.display = "block";
        } else {
            loadMoreBtn.style.display = "none"; // Kh√¥ng c√≤n post ƒë·ªÉ t·∫£i
        }
    } catch (error) {
        postsError.classList.add("show");
        postsError.textContent = `L·ªói: ${error.message}`;
    } finally {
        postsLoading.classList.remove("show");
    }
}

/* T·∫£i 5 posts ƒë·∫ßu ti√™n khi trang ƒë∆∞·ª£c load */
document.addEventListener("DOMContentLoaded", () => {
    loadPosts(currentPage);
});

/* S·ª± ki·ªán click n√∫t "Xem th√™m" */
loadMoreBtn.addEventListener("click", () => {
    currentPage++;
    loadPosts(currentPage);
});

/**
 * Ch·ª©c nƒÉng 3: Todo List v·ªõi Filter
 */

/* Get DOM Element */
const loadTodosBtn = document.querySelector("#load-todos-btn");
const todoUserIdInput = document.querySelector("#todo-user-id-input");
const todoList = document.querySelector("#todo-list");
const todoFilters = document.querySelector("#todo-filters");
const todoError = document.querySelector("#todos-error");
const todoItemTemplate = document.querySelector(".todo-item[data-todo-id='']");
const todosLoading = document.querySelector("#todos-loading");
const totalTodos = document.querySelector("#total-todos");
const completedTodos = document.querySelector("#completed-todos");
const incompleteTodos = document.querySelector("#incomplete-todos");

/* Kh·ªüi t·∫°o bi·∫øn */
let allTodos = [];
let currentFilter = "all";

/* H√†m filter tr·∫°ng th√°i: T·∫•t c·∫£ | ƒê√£ ho√†n th√†nh | Ch∆∞a ho√†n th√†nh -> sau ƒë√≥ render */
function filterTodos() {
    let filterTodos = allTodos;
    if (currentFilter === "completed") {
        filterTodos = allTodos.filter((todo) => todo.completed);
    } else if (currentFilter === "incomplete") {
        filterTodos = allTodos.filter((todo) => !todo.completed);
    } else {
        filterTodos = allTodos;
    }

    renderTodos(filterTodos);
}

/* H√†m render danh s√°ch todos */
function renderTodos(todos) {
    todoList.innerHTML = ""; // Reset todo-list
    if (!todos) return;

    todos.forEach((todo) => {
        const todoItem = todoItemTemplate.cloneNode(true);
        todoItem.dataset.todoId = todo.id;
        todoItem.dataset.completed = todo.completed;
        todoItem.querySelector(".todo-text").textContent = todo.title;
        todoItem.classList.add(todo.completed ? "completed" : "incomplete");
        todoList.appendChild(todoItem);
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™
    const completedCount = allTodos.filter((todo) => todo.completed).length;
    totalTodos.textContent = allTodos.length;
    completedTodos.textContent = completedCount;
    incompleteTodos.textContent = allTodos.length - completedCount;
}

/* "Click": N√∫t loadTodosBtn */
loadTodosBtn.addEventListener("click", async () => {
    const userId = todoUserIdInput.value;
    if (!userId) {
        todoError.classList.add("show");
        todoError.textContent = "Vui l√≤ng nh·∫≠p User ID.";
        return;
    }

    // Reset v√† hi·ªÉn th·ªã loading
    todosLoading.classList.add("show");
    todoError.classList.remove("show");
    todoList.innerHTML = "";
    allTodos = [];
    renderTodos([]);

    try {
        const todosUrl = `${API_BASE_URL}/users/${userId}/todos`;
        const todos = await sendRequest("GET", todosUrl);
        allTodos = todos;
        filterTodos(); // Hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi
    } catch (error) {
        todoError.classList.add("show");
        if (error.status === 404) {
            todoError.textContent = `L·ªói: Kh√¥ng t√¨m th·∫•y todos cho user ID ${userId}.`;
        } else {
            todoError.textContent = `L·ªói: ${error.message}`;
        }
    } finally {
        todosLoading.classList.remove("show");
    }
});

/* Click: C√°c n√∫t filter */
todoFilters.addEventListener("click", (e) => {
    if (e.target.tagName === "BUTTON") {
        document.querySelector(".filter-btn.active").classList.remove("active");
        e.target.classList.add("active");
        currentFilter = e.target.dataset.filter;
        filterTodos(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa filter hi·ªán t·∫°i
    }
});